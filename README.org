* [[https://github.com/sehqlr/zation][zation]]
  An experimental document database for org-mode files, written in Haskell

** What?
   - Experimental :: I have no idea what I'm doing, but I have a pretty good idea of the end result and even if I don't get there, I'm going to learn stuff
   - Document Database :: I want to make something similar to MongoDB, but instead of JSON documents, I want to store org-mode documents
   - Org-mode files :: [[orgmode.org][org-mode]] is an emacs major mode and plaintext markup language
   - Haskell :: it's that functional language that you've heard of, probably
                       
** Why?
   There are three main reasons why I started this project:

   1. I believe that org-mode is a really great markup language, but as of now,
      it mostly lives in Emacs, which is not a UI that everyone has the time or
      attention to learn. What if you could have a client/server architecture
      for org-mode, where more UIs could be built around this great software?
   2. I like to jump around different kinds of software development for my side
      projects. Other projects I've started tried to be all MVP and focused, but
      I'd get bored or stuck working on a narrow problem. This project has a lot
      of different parts in it, so I can switch to different kinds of problems
      when it suits me. I'm still going to be doing small chunks, but all the
      chunks will be adding up to a whole.
   3. This is the first project idea I've had where I know exactly what I want
      out of it, and I don't care if anyone else likes it. This is mostly a
      learning exercise for me, but I also know the problem that the software
      will be solving for me.

** Who?
   As for now, it's just me. I'm building this mostly for myself, and the use
   case is similar to that of SQLite -- a database that's just a file in your
   file system, replacing a directory of org-mode files. Eventually, it may
   expand to a daemon process that can hold all of your org-mode files on a
   single machine, but not any further than that to start out with. If for some
   reason people like this project, I'd like to expand to things like
   replication, clusters, multiple clients accessing a database instance, &c.

** How?
   I want to lay out the dependencies of the project, and the roadmap.
*** The Tech Stack

**** Haskell Stack
     Stack provides the packaging tooling for zation. After some experimentation
     in an unstructured directory, I moved that code into a =haskeleton= project.

**** Parsec
     I chose the =parsec= parser combinator library mostly because there seems
     to be a lot of reading materials online for it. My hope is that I'm going
     to make my codebase modular enough that I'll be able to switch to a
     different PC library if needed. My early experiements were actually in the
     =ReadP= type from =base= because of a really nice blog post I read. That
     post gave me the confidence that I could learn parser combinators, and then
     I knew I could actually write this thing.

***** TODO Add blog post link here
      
**** Tasty & Criterion
     =tasty= came with =haskeleton= but it includes both =hspec= and
     =QuickCheck=. I've used =hspec= and other BDD-style testing frameworks
     before, and I'm really excited to learn how to use =QuickCheck=

     As for =criterion=, I've never actually written any kind of benchmarking
     tests, so that'll be a whole new subject for me to explore.

**** Pandoc
     The Pandoc library will then be used for exporting to other formats. I'm
     thinking that I'll have Pandoc embedded for basic exporting, but include
     instructions for using pandoc executable as well.

**** Dhall
     I'm going to use Dhall as the configuration language for this project. I've
     been wanting to learn it for some time, and I think this will be a perfect
     project for it.

**** Brick
     I'm very interested in using the Editor type in Brick for the interactive
     shell for the CLI.

**** Scotty
**** Other dependencies
***** containers
***** store
***** prettyprinter

*** brief roadmap
    see this blog post for more details

    The pattern of development for zation goes like this:
    1. Checkout a new git branch
    2. Find the next easiest org-mode syntax that hasn't been worked on yet
    3. Create a new type, parser and printer for that feature
    4. Write exported CRUD functions, tests, and documentation for that type
    5. Once everything is verified, merge branch back into source

    My idea is that version 1.x will be for me, 2.x will be for other
    individuals, 3.xx small teams on a LAN, 4.x distributed teams, 5.x
    enterprises, 6.x anyone and everyone.
